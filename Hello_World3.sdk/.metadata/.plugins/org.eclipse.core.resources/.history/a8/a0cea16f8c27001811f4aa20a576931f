/* Hello_Wavegen.c
 *
 *  Created on: Nov 6, 2017
 *      Author: Thomas
 */


#include<xgpio.h>						// Obtain from https://github.com/Xilinx/embeddedsw
#include<xparameters.h>
#include<math.h>
#include "platform.h"
#include "xil_printf.h"
#include <xuartlite.h>
#include "xbasic_types.h"
#include <stdlib.h>
XGpio e,rs,rw,lcd_data,keypad;
XUartLite Uart;

#define BufferSize 12
/********************************Declare Functions************************************/

/*
 * Precondition: None
 * Postcondition: The Program is delayed by 1.17 X 10^-7s*input parameter
 */
void delay(int counter)
{
       while(counter) counter--;
}

/*
 * Precondition: Ports are set up, delay function declared, XGPIO header included
 * Postcondition: LCD display receives a command
 */
void lcd_command(char i)
{
     XGpio_DiscreteWrite(&lcd_data,1,i);
     XGpio_DiscreteWrite(&rs, 1, 0);
     XGpio_DiscreteWrite(&rw,1,0);						// Setup the LCD to read from FPGA
     XGpio_DiscreteWrite(&e, 1, 1);
     delay(100000);										// wait 11.7ms
     XGpio_DiscreteWrite(&e, 1, 0);
}

/*
 * Precondition: Ports are set up, delay function declared, XGPIO header included
 * Postcondition: LCD display will display a string
 */
void lcd_write(char *string, int c)						// Write a string to LCD
{
	  int i;
	  for (i=0; i < c; i++)								// c = number of characters, i = counter
	  {
      XGpio_DiscreteWrite(&lcd_data, 1,string[i]);
      XGpio_DiscreteWrite(&rs, 1, 1);
      XGpio_DiscreteWrite(&rw,1,0);						// Setup the LCD to read from FPGA
      XGpio_DiscreteWrite(&e, 1, 1);
      delay(100000);									// wait 11.7ms
      XGpio_DiscreteWrite(&e, 1, 0);
	  }
}

/*
 * Precondition: Ports are set up, delay function declared, XGPIO header included
 * Postcondition: LCD display will display a single character
 */
void lcd_write_char(char i)								// Write a character to LCD
{

      XGpio_DiscreteWrite(&lcd_data, 1,i);
      XGpio_DiscreteWrite(&rs, 1, 1);
      XGpio_DiscreteWrite(&rw,1,0);						// Setup the LCD to read from FPGA
      XGpio_DiscreteWrite(&e, 1, 1);
      delay(100000);									// wait 11.7ms
      XGpio_DiscreteWrite(&e, 1, 0);
}

/*
 * Precondition: 20X4 display used
 * Postcondition: LCD display cursor will be placed based on its row and column number
 */
void cursor(int row, int column)
{
      if(row==1)
      		lcd_command(0x80|(column-1));
      if (row==2)
      		lcd_command(0x80|(0x40+(column-1)));
	  if (row==3)
      		lcd_command(0x80|(0x14+(column-1)));
      if (row==4)
      		lcd_command(0x80|(0x54+(column-1)));
}

/*
 * Precondition: LCD display has been initialized
 * Postcondition: The cursor is moved if up or down is selected on the keypad, the resulting row is returned
 */
int up_down(int key, int row, char bank)				// Check if up or down was selected on the keypad
{
	 int x;
	 x = row;
	 if (key == 8)									// Up selected
	 {
		 if (x == 1)
		 {
	      	x = 4;
	      	cursor(4,1);
		 } else if (x == 2) {
			x = 1;
			cursor(1,1);
		 } else if (x == 3) {
	        if (bank =='D')							// Arbitrary, rows 1 and 2 have no function
	        	{
	        		x = 4;							// User can only navigate between row 3 and 4
	        		cursor(4,1);
	        	} else {
	        		x = 2;
	        		cursor(2,1);
	        	}
	     } else {
	    	x = 3;
	        cursor(3,1);
	     }
	  } else if (key == 4) {						// Down selected
		if (x == 1)
		{
			x = 2;
			cursor(2,1);
		} else if (x == 2) {
			x = 3;
			cursor(3,1);
		} else if (x == 3) {
		    x = 4;
		    cursor(4,1);
		} else {
			if (bank == 'D')						// Arbitrary, rows 1 and 2 have no function
				{
					x = 3;							// User can only navigate between row 3 and 4
					cursor(3,1);
				} else {
					x = 1;
					cursor(1,1);
				}
		}
	}
	return x;
}

/*
 * Precondition: GPIO inputs are received from a keypad
 * Postcondition: Index is either incremented or decremented
 */
int left_right(int key, int index, int row)
{
	int x;
	x = index;
	if (key == 2)										// Left selected
	{
		x = x - 1;
	} else if (key == 1) {								// Right selected
		x = x + 1;
	}
	if (row == 1)										// Check frequency index limits (1-16)
		{
			if (x == 0)
			{
				x = 16;
			} else if (x >= 17) {
				x = 1;
			}
		} else if (row == 2) {						// Check amplitude index limits (1-7)
			if (x == 0)
			{
				x = 7;
			} else if (x >= 8) {
				x = 1;
			}
		} else if (row == 3) {						// Check bank index limits (1-4)
			if (x == 0)
			{
				x = 4;
			} else if (x >= 5) {
				x = 1;
			}
		}
	return x;
}

/*
 * Precondition: None
 * Postcondition: The frequency is cycled
 */
char * cycle_freq(int freqCycle)
{
	if (freqCycle == 1)
	{
		return "1Hz   ";
	} else if (freqCycle == 2) {
		return "2Hz   ";
	} else if (freqCycle == 3) {
		return "5Hz   ";
	}else if (freqCycle == 4) {
		return "10Hz  ";
	}else if (freqCycle == 5) {
		return "20Hz  ";
	}else if (freqCycle == 6) {
		return "50Hz  ";
	}else if (freqCycle == 7) {
		return "100Hz ";
	}else if (freqCycle == 8) {
		return "200Hz ";
	}else if (freqCycle == 9) {
		return "500Hz ";
	}else if (freqCycle == 10) {
		return "1kHz  ";
	}else if (freqCycle == 11) {
		return "2kHz  ";
	}else if (freqCycle == 12) {
		return "5kHz  ";
	}else if (freqCycle == 13) {
		return "10kHz ";
	}else if (freqCycle == 14) {
		return "20kHz ";
	}else if (freqCycle == 15) {
		return "50kHz ";
	}else if (freqCycle == 16) {
		return "100kHz";
	} else {
		return "1Hz   ";
	}
}

/*
 * Precondition: Frequency has been cycled
 * Postcondition: An integer value is given for the frequency
 */
int get_freq(int freqCycle)
{
	if (freqCycle == 1)
	{
		return 1;
	} else if (freqCycle == 2) {
		return 2;
	} else if (freqCycle == 3) {
		return 5;
	}else if (freqCycle == 4) {
		return 10;
	}else if (freqCycle == 5) {
		return 20;
	}else if (freqCycle == 6) {
		return 50;
	}else if (freqCycle == 7) {
		return 100;
	}else if (freqCycle == 8) {
		return 200;
	}else if (freqCycle == 9) {
		return 500;
	}else if (freqCycle == 10) {
		return 1000;
	}else if (freqCycle == 11) {
		return 2000;
	}else if (freqCycle == 12) {
		return 5000;
	}else if (freqCycle == 13) {
		return 10000;
	}else if (freqCycle == 14) {
		return 20000;
	}else if (freqCycle == 15) {
		return 50000;
	}else if (freqCycle == 16) {
		return 100000;
	} else {
		return 1;
	}
}


/*
 * Precondition: None
 * Postcondition: The amplitude is cycled
 */
char * cycle_amp(int ampCycle)
{
	if (ampCycle == 1)
	{
		return "0.1V";
	} else if (ampCycle == 2) {
		return "0.2V";
	} else if (ampCycle == 3) {
		return "0.5V";
	} else if (ampCycle == 4) {
		return "1V  ";
	} else if (ampCycle == 5) {
		return "2V  ";
	} else if (ampCycle == 6) {
		return "5V  ";
	}else if (ampCycle == 7) {
		return "10V ";
	} else {
		return "0.1V";
	}
}

/*
 * Precondition: The amplitude is cycled
 * Postcondition: A value is given for the amplitude
 */
int get_amp(int ampCycle)
{
	if (ampCycle == 1)
	{
		return 100;
	} else if (ampCycle == 2) {
		return 200;
	} else if (ampCycle == 3) {
		return 500;
	} else if (ampCycle == 4) {
		return 1000;
	} else if (ampCycle == 5) {
		return 2000;
	} else if (ampCycle == 6) {
		return 5000;
	}else if (ampCycle == 7) {
		return 10000;
	} else {
		return 0.1;
	}
}

/*
 * Precondition: None
 * Postcondition: The bank is cycled
 */
char cycle_bank(int bankCycle)
{
	if (bankCycle == 1)
	{
		return 'A';
	} else if (bankCycle == 2) {
		return 'B';
	} else if(bankCycle ==3) {
		return 'C';
	} else if (bankCycle == 4) {
		return 'D';
	} else {
		return 'A';
	}
}

/*
 * Precondition: The cursor is on a row that can be selected
 * Postcondition: return a new screen to be displayed if select was used
 */
char enter(int key, int row, int i)
{
	if (key == 10)
	{
		if (i == 1)								// Called by main menu
		{
			if (row == 3)						// Bank was selected
			{
				return 'B';						// Initialize bank detail screen
			} else if(row == 4) {				// Options was selected
				return 'O';						// Initialize options screen
			}
		} else if (i == 2) {
			return 'H';							// Return the selected bank to the main menu
		} else if (i == 3) {
			return 'H';
		}
	}
	if ( i == 1)
	{
		return 'H';								// Return to the main menu if nothing was selected on main menu
	} else if (i == 2) {
		return 'B';								// Return to the bank menu if nothing was selected on bank menu
	} else if (i == 3) {
		return 'C';
	}
}												// Caution does not impact the software

/*
 * Precondition: None
 * Postcondition: If home is selected, return to the home screen. If home is not selected,
 * 				  return to the previous screen.
 */
char return_home(int key, char display)
{
	if (key == 5 || display == 'H') 			// The home button was pressed or a bank was selected
	{
		return 'H';
	} else if (display == 'B') {
		return 'B';
	} else if (display == 'O'){
		return 'O';
	} else {
		return 'L';
	}
}

/*
 * Precondition: None
 * Postcondition: if the frequency has been changed, the display is updated
 */
void update_frequency(char *frequency1, char *frequency2)
{
		   frequency1[0] = frequency2[0];
		   frequency1[1] = frequency2[1];
		   frequency1[2] = frequency2[2];
		   frequency1[3] = frequency2[3];
		   frequency1[4] = frequency2[4];
		   frequency1[5] = frequency2[5];
		   cursor(1,15);
		   lcd_write(frequency1,6);
		   cursor(1,1);					// Set cursor back to the F in Frequency
}

/*
 * Precondition: None
 * Postcondition: if the amplitude has been changed, the display is updated
 */
 void update_amplitude(char *amplitude1, char *amplitude2)
{
		   amplitude1[0] = amplitude2[0];
		   amplitude1[1] = amplitude2[1];
		   amplitude1[2] = amplitude2[2];
		   amplitude1[3] = amplitude2[3];
		   cursor(2,15);
		   lcd_write(amplitude1,4);
		   cursor(2,1);					// Set cursor back to the A in Amplitude
}


/*
 * Precondition: The LCD display has been initialized
 * Postcondition: The LCD display will display the main menu
 */
void home(char *frequency, char *amplitude, char bank)
{
    lcd_command(0x01);						// Clear screen
	if (bank == 'D')
	   {
			cursor(1,6);
			lcd_write("Arbitrary", 9);
	   } else {
			lcd_write("Frequency", 9);
			cursor(1,15);
			lcd_write(frequency, 6);
			cursor(2,1);
			lcd_write("Amplitude", 9);
			cursor(2,15);
			lcd_write(amplitude, 4);
	   }
			cursor(3,1);
			lcd_write("Bank", 4);
			cursor(3,15);
			lcd_write_char(bank);
			cursor(4,1);
			lcd_write("Options", 7);
}

/*
 * Precondition: Options is selected on the main menu
 * Postcondition: The LCD display will display the options menu
 */

/*
 * Precondition: None
 * Postcondition: if the bank has been changed, the display is updated
 */
char update_bank(char bank1, char bank2, char* frequency, char* amplitude)
{
	   if (bank1 != bank2)
	   {
		   cursor(1,1);
		   home(frequency, amplitude, bank2);	// Reload home screen to disable control of frequency/amplitude when bank D is selected
		   bank1 = bank2;
		   cursor(3,15);
		   lcd_write_char(bank1);
		   cursor(3,1);					// Set cursor back to the B in Bank
	   }
	   return bank1;
}

void options(void)
{
	   cursor(1,1);
	   lcd_write("Reserved for future",19);
	   cursor(3,9);
	   lcd_write("use", 3);
}

/*
 * Precondition: Bank has been selected on the main menu or the cursor is on A in the bank detail menu
 * Postcondition: The LCD display will display the bank detail menu for bank A
 */

void bankA(void)
{
        lcd_command(0x01);						// Clear screen
		lcd_write("A ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Sine", 4);					// Bank A CH1 output name
		cursor(1,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Square", 6);					// Bank A CH5 output name
		cursor(2,1);
		lcd_write("B ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("DC", 2);						// Bank A CH2 output name
		cursor(2,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Triangle", 8);				// Bank A CH6 output name
		cursor(3,1);
		lcd_write("C ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Sinc", 4);					// Bank A CH3 output name
		cursor(3,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Sawtooth", 8);				// Bank A CH7 output name
		cursor(4,1);
		lcd_write("D ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Noise", 5);					// Bank A CH4 output name
		cursor(4,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("Heart", 5);					// Bank A CH8 output name
		cursor(1,1);
}

/*
 * Precondition: Bank has been selected on the main menu and the user is on bank B
 * Postcondition: The LCD display will display the bank detail menu for bank B
 */

void bankB(void)
{
        lcd_command(0x01);						// Clear screen
		lcd_write("A ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh1", 8);				// Bank B CH1 output name
		cursor(1,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh5", 8);				// Bank B CH5 output name
		cursor(2,1);
		lcd_write("B ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh2", 8);				// Bank B CH2 output name
		cursor(2,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh6", 8);				// Bank B CH6 output name
		cursor(3,1);
		lcd_write("C ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh3", 8);				// Bank B CH3 output name
		cursor(3,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh7", 8);				// Bank B CH7 output name
		cursor(4,1);
		lcd_write("D ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh4", 8);				// Bank B CH4 output name
		cursor(4,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankBCh8", 8);				// Bank B CH8 output name
		cursor(2,1);
}

/*
 * Precondition: Bank has been selected on the main menu and the user is on C
 * Postcondition: The LCD display will display the bank detail menu for bank C
 */

void bankC(void)
{
        lcd_command(0x01);						// Clear screen
		lcd_write("A ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh1", 8);				// Bank C CH1 output name
		cursor(1,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh5", 8);				// Bank C CH5 output name
		cursor(2,1);
		lcd_write("B ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh2", 8);				// Bank C CH2 output name
		cursor(2,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh6", 8);				// Bank C CH6 output name
		cursor(3,1);
		lcd_write("C ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh3", 8);				// Bank C CH3 output name
		cursor(3,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh7", 8);				// Bank C CH7 output name
		cursor(4,1);
		lcd_write("D ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh4", 8);				// Bank C CH4 output name
		cursor(4,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankCCh8", 8);				// Bank C CH8 output name
		cursor(3,1);
}

/*
 * Precondition: Bank has been selected on the main menu and the user is on D
 * Postcondition: The LCD display will display the bank detail menu for bank D
 */

void bankD(void)
{
        lcd_command(0x01);						// Clear screen
		lcd_write("A ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh1", 8);				// Bank D CH1 output name
		cursor(1,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh5", 8);				// Bank D CH5 output name
		cursor(2,1);
		lcd_write("B ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh2", 8);				// Bank D CH2 output name
		cursor(2,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh6", 8);				// Bank D CH6 output name
		cursor(3,1);
		lcd_write("C ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh3", 8);				// Bank D CH3 output name
		cursor(3,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh7", 8);				// Bank D CH7 output name
		cursor(4,1);
		lcd_write("D ", 2);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh4", 8);				// Bank D CH4 output name
		cursor(4,12);
		lcd_write_char(0xA5);					// Bullet Point
		lcd_write("BankDCh8", 8);				// Bank D CH8 output name
		cursor(4,1);
}

/*
 * Precondition: The bank menu is displayed
 * Postcondition: If the row is changed, the bank details change
 */
char bank_details(int row, char bank1, char bank2)
{
	 if (row == 1)					// Bank A
	 {
	   bank2 = 'A';					// Cursor on A
	   if (bank1 != bank2)
	   {
		   bankA();					// Update screen to show bank A details
		   bank1 = bank2;			// Change reference bank
	   }
	 } else if (row == 2) {
	   bank2 = 'B';					// Cursor on B
	   if (bank1 != bank2)
	   {
	    bankB();					// Update screen to show bank B details
	    bank1 = bank2;				// Change reference bank
	   }
	 } else if (row == 3) {
	   bank2 = 'C';					// Cursor on C
	   if (bank1 != bank2)
	   {
		   bankC();					// Update screen to show bank C details
		   bank1 = bank2;			// Change reference bank
	   }
	 } else if (row == 4) {
	   bank2 = 'D';					// Cursor on D
	   if (bank1 != bank2)
	   {
	      bankD();					// Update screen to show bank D details
	      bank1 = bank2;			// Change reference bank
	   }
	 }
	 return bank2;
}

/*
 * Precondition: The bank is being changed from the bank menu
 * Postcondition: The bank on the main screen is synced with the bank selected on the bank menu
 */
int sync_bank(char bank2)
{
	if (bank2 == 'A')
	{
		return 1;
	} else if (bank2 == 'B') {
		return 2;
	} else if (bank2 == 'C') {
		return 3;
	} else {
		return 4;
	}
}

/*
 * Precondition: Bank menu is loaded
 * Postcondition: The correct details are loaded for the selected bank on the main menu and the row
 * 				  is adjusted accordingly
 */
int correct_bank(char bank2)
{
	   if (bank2 == 'A')
	   {
		   bankA();
		   return 1;
	   } else if (bank2 == 'B') {
		   bankB();
		   return 2;
	   } else if (bank2 == 'C') {
		   bankC();
		   return 3;
	   } else {
		   bankD();
		   return 4;
	   }
}

/*
 * Precondition: There is a problem with the switch function
 * Postcondition: "ERROR" is displayed on the display and the program ends
 */
void error(void)
{
	   lcd_write("ERROR", 5);
}

/*
 * Precondition: The device was powered on
 * Postcondition: A startup screen is shown for 2s
 */
void welcome_screen(void)
{
	cursor(2,1);
	lcd_write("AstroNova",9);
	cursor(3,1);
	lcd_write("Test & Measurement",18);
	delay(18000000);							// delay 2.1s
}

/*
 * Precondition: A low battery signal was received
 * Postcondition: The user is prompted to charge the device
 */
void low_battery(void)
{
	cursor(1,1);
	lcd_write("Battery low-Turn off",20);
	cursor(2,1);
	lcd_write("power or apply",14);
	cursor(3,1);
	lcd_write("external voltage as",19);
	cursor(4,1);
	lcd_write("soon as possible",16);
}

/*
 * Precondition: Hardware has been described in Vivado
 * Postcondition: The LCD is initialized
 */
int gpio_init (void)
{
	int status;
	/*
     XGpio_Initialize(&e, XPAR_AXI_GPIO_2_DEVICE_ID);
     XGpio_Initialize(&rs, XPAR_AXI_GPIO_3_DEVICE_ID);
     XGpio_Initialize(&rw, XPAR_AXI_GPIO_1_DEVICE_ID);
     XGpio_Initialize(&lcd_data, XPAR_AXI_GPIO_4_DEVICE_ID);
     XGpio_Initialize(&keypad, XPAR_AXI_GPIO_0_DEVICE_ID);
     */
    XGpio_Initialize(&e, XPAR_AXI_GPIO_1_DEVICE_ID);
    XGpio_Initialize(&rs, XPAR_AXI_GPIO_2_DEVICE_ID);
    XGpio_Initialize(&rw, XPAR_AXI_GPIO_0_DEVICE_ID);
    XGpio_Initialize(&lcd_data, XPAR_AXI_GPIO_3_DEVICE_ID);
    XGpio_Initialize(&keypad, XPAR_AXI_GPIO_4_DEVICE_ID);
    status = XUartLite_Initialize(&Uart, XPAR_AXI_UARTLITE_0_DEVICE_ID);
  //  if (status != XST_SUCCESS)
  //  {
  //  	return status;
 //   }
    status = XUartLite_SelfTest(&Uart);
//    if (status != XST_SUCCESS)
//    {
//    	return status;
//    }
    XUartLite_DisableInterrupt(&Uart);

     /*Set the GPIOs as output*/
     XGpio_SetDataDirection(&e,1,0);
     XGpio_SetDataDirection(&rs,1,0);
     XGpio_SetDataDirection(&rw,1,0);
     XGpio_SetDataDirection(&lcd_data,1,0);
     /*Set the GPIOs as input*/
     XGpio_SetDataDirection(&keypad,1,1);
}

/********************************Main Program************************************/

int main(void)
{
	   // Declare Outputs
	   // Bank A
	   int ch1A = 0;
	   int ch2A = 1;
	   int ch3A = 2;
	   int ch4A = 3;
	   int ch5A = 4;
	   int ch6A = 5;
	   int ch7A = 6;
	   int ch8A = 7;
	   // Bank B
	   int ch1B = 8;
	   int ch2B = 3;
	   int ch3B = 0;
	   int ch4B = 1;
	   int ch5B = 2;
	   int ch6B = 3;
	   int ch7B = 4;
	   int ch8B = 5;
	   // Bank c
	   int ch1C = 6;
	   int ch2C = 7;
	   int ch3C = 8;
	   int ch4C = 3;
	   int ch5C = 0;
	   int ch6C = 1;
	   int ch7C = 2;
	   int ch8C = 3;
	   // Bank D
	   int ch1D = 4;
	   int ch2D = 5;
	   int ch3D = 6;
	   int ch4D = 7;
	   int ch5D = 8;
	   int ch6D = 3;
	   int ch7D = 0;
	   int ch8D = 1;

	   // Declare Variables
	   int freqCycle = 1;
	   int ampCycle = 4;
	   int bankCycle = 1;
	   int row = 1;
	   int dummy = 2;
	   int frequencyLength;
	   int amplitudeLength;
	   int key;
	   int frequencyValue = 1;
	   int PCFrequencyValue = 1;
	   char PCArray[6] = {0,0,0,0,0,0};
	   int amplitudeValue = 1000;
	   int PCAmplitudeValue = 1000;
	   char frequency1[6];
	   char *frequency2 = "1Hz   ";
	   char amplitude1[4];
	   char *amplitude2 = "1V  ";
	   char ID[2] = {0, 0};
	   char bank1 = 'A';
	   char bank2 = 'A';
	   char display = 'H';
	   Xuint8 SendBuffer[BufferSize] = {0,0,0,0,0,0,0,0,0,0,0};
	   Xuint8 ReceiveBuffer[BufferSize] = {0,0,0,0,0,0,0,0,0,0,0};
	   int receievedBytes;
	   char Freq[6] = {0,0,0,0,0,0};
	   char Ampl[5] = {0,0,0,0,0};
	   int i, p;
	   char x[2];
	   char *y;
	   char channel[4];

	   // Set up display
       gpio_init();
       XGpio_DiscreteWrite(&e, 1, 0);
       delay(4500000);					// wait >40ms
       lcd_command(0x30);				// wake up 1
       delay(500000);					// wait 58.5ms
       lcd_command(0x30);				// wake up 2
       delay(1600);						// wait 187us
       lcd_command(0x30);				// wake up 3
       delay(1600);						// wait 187us
       lcd_command(0x38);				// Function set: 8-bit / 4 rows
       lcd_command(0x0D);				// Display ON; Blink ON
       lcd_command(0x0E);				// Display ON; Cursor underline
       lcd_command(0x06);				// Entry Mode Set
	   lcd_command(0x01);				// Clear screen
       welcome_screen();				// Display the startup screen
       init_platform();

       while (dummy < 5)
       {
       switch (display)
       {
       	   case 'H': 									// Home Screen
       	       home(frequency2, amplitude2, bank2);		// Initialize home menu
       	       if (bank2 == 'D')
       	       {
       	    	   cursor(3,1);							// When in arbitrary, limit navigation to row 3 and 4
       	       } else {
       	    	   cursor(1,1);							// Set cursor back to the start
       	       }
      		   while (display == 'H')
      		   {
     				   key = XGpio_DiscreteRead(&keypad,1);
     				   receievedBytes = XUartLite_Recv(&Uart, ReceiveBuffer, BufferSize);
     				   if (ReceiveBuffer[0] == 'H')
     				   {
     					  display = 'C';
     					  xil_printf("The number of Bytes received is: %i\n\r", receievedBytes);
     				   }
     				   if (key == 12)
     				   {
     					   display = 'L';				// Battery is low
     					   break;
     				   }
      				   row = up_down(key, row, bank2);
     				   delay(500000);					// Delay 58.5ms
      				   if (row == 1)
      				   {
      						   freqCycle = left_right(key, freqCycle, 1);
      						   frequency2 = cycle_freq(freqCycle);
      						   if (frequency1[0] != frequency2[0] || frequency1[1] != frequency2[1])
      						   {
      							   update_frequency(frequency1, frequency2);
      							   frequencyValue = get_freq(freqCycle);
      						   }
      				   } else if (row == 2) {
      						   ampCycle = left_right(key, ampCycle, 2);
      						   amplitude2 = cycle_amp(ampCycle);
      						   if (amplitude1[0] != amplitude2[0] || amplitude1[2] != amplitude2[2])
      						   {
      							   update_amplitude(amplitude1, amplitude2);
      							   amplitudeValue = get_amp(ampCycle);
      						   }
      				   } else if (row == 3) {
          				   bankCycle = left_right(key, bankCycle, 3);
      					   bank2 = cycle_bank(bankCycle);
      					   bank1 = update_bank(bank1, bank2, frequency2, amplitude2);
      					   if (key == 10)
      					   {
      						   display = enter(key, row, 1);
      					   }
      				   } else if (row == 4) {
      					   display = enter(key,row, 1);
      				   }
     				   delay(800000);					// Delay 93.6ms for debounce (total of 152ms)
      		   }
       		   break;
       	   case 'B':									// Bank Screen
       		   row = correct_bank(bank2);
      		   while (display == 'B')
      		   {
     				   key = XGpio_DiscreteRead(&keypad,1);
     				   if (key == 12)
     				   {
     					   display = 'L';				// Battery is low
     					   break;
     				   }
      				   row = up_down(key, row, bank2);
     				   delay(500000);					// Delay 58.5ms
     				   bank2 = bank_details(row,bank2,bank2);
     				   bankCycle = sync_bank(bank2);
     				   display = enter(key,row,2);
     				   display = return_home(key,display);
      		   }
       		   break;
       	   case 'O':									// Options screen
       		   lcd_command(0x01);						// Clear screen
   			   options();
       		   while (display == 'O')
       		   {
       			   key = XGpio_DiscreteRead(&keypad,1);
 				   if (key == 12)
 				   {
 					   display = 'L';					// Battery is low
 					   break;
 				   }
       			   display = return_home(key,display);
       		   }
       		   break;
       	   case 'L':									// Low battery screen
       		   lcd_command(0x01);						// Clear screen
       		   low_battery();							// The battery needs to be charged
       		   while (display == 'L')
       		   {
       			   key = XGpio_DiscreteRead(&keypad,1);
       			   display = return_home(key,display);
       		   }
       		   break;
       	   case 'C':
       		   lcd_command(0x01);														//Clear the display
       		   cursor(1,5);
       		   lcd_write("Host Control",12);
       		   cursor(4,6);
       		   lcd_write("Disconnect",10);
       		   cursor(4,6);
       		   PCFrequencyValue = frequencyValue;										//Initially set the PCFrequency value to match the local value
       		   PCAmplitudeValue = amplitudeValue;										//Initially set the PCFrequency value to match the local value
       		   while (display == 'C')													//Host has control
       		   {
       			memcpy(ReceiveBuffer,(char*)"000000000000", BufferSize);				//Clear the receive buffer
       			memcpy(PCArray,(char*) "000000", 6);									//Clear the dummy PC array for its next use
        	    itoa(PCAmplitudeValue,Ampl,10);											//Obtain a ASCII representation of the amplitude
        	    itoa(PCFrequencyValue,Freq,10);											//Obtain a ASCII representation of the frequency
       			key = XGpio_DiscreteRead(&keypad,1);
       			if (key == 10)
       			{
       				memcpy(SendBuffer,(char*)"Local", 5);
       				XUartLite_Send(&Uart, SendBuffer, 5);								//Notify the host that the device was disconnected
           			display = enter(key,row,3);
       			}
				receievedBytes = XUartLite_Recv(&Uart, ReceiveBuffer, BufferSize);		//Poll for commands or queries
				delay(1000000);
				if (ReceiveBuffer[0] == 'F')											//FREQ header detected
				{
					if (ReceiveBuffer[4] == '?')										//FREQ query detected
					{
						frequencyLength = floor(log10(abs(PCFrequencyValue)))+1;			//Calculate the length of the current frequency integer value
						memcpy(SendBuffer,Freq, frequencyLength);						//Copy the frequency ASCII value into the send buffer
						XUartLite_Send(&Uart, SendBuffer, frequencyLength);				//Send the ASCII frequency value over UART
					} else if (ReceiveBuffer[4] == ' ') {								//FREQ command detected
						p = 1;
						for(i=0;i<7;i++)												//Loop to extract the frequency value from the command
						{
							if (ReceiveBuffer[11-i] != 0x0A)							//Read the PC command backwards
							{
								if (ReceiveBuffer[11-i+p] == 0x0A)						//Data is valid after line feed is read
								{
									PCArray[6-p] = ReceiveBuffer[11-i];					//Fill dummy array backwards
									p++;
								}
							}
						}
						PCFrequencyValue = atoi(PCArray);								//Convert the extracted character array to an integer value
						xil_printf("%i", PCFrequencyValue);
					}
				} else if (ReceiveBuffer[0] == 'A') {									//AMPL header detected
					if (ReceiveBuffer[4] == '?')										//AMPL query detected
					{
						amplitudeLength = floor(log10(abs(PCAmplitudeValue)))+1;		//Calculate the length of the amplitude integer value
						memcpy(SendBuffer, Ampl, amplitudeLength);						//Copy the amplitude ASCII value into the send buffer
						XUartLite_Send(&Uart, SendBuffer, amplitudeLength);				//Send the ASCII amplitude value over UART
					} else if (ReceiveBuffer[4] == ' ') {								//FREQ command detected
						p = 1;
						for(i=0;i<7;i++)												//Loop to extract the amplitude value from the command
						{
							if (ReceiveBuffer[11-i] != 0x0A)							//Read the PC command backwards
							{
								if (ReceiveBuffer[11-i+p] == 0x0A)						//Data is valid after line feed is read
								{
									PCArray[6-p] = ReceiveBuffer[11-i];					//Fill dummy array backwards
									p++;
								}
							}
						}
						PCAmplitudeValue = atoi(PCArray);								//Convert the extracted character array to an integer value
						xil_printf("%i", PCAmplitudeValue);
					}
				} else if (ReceiveBuffer[0] == 'B') {									//BANK header detected
					if (ReceiveBuffer[4] == '?')										//BANK query detected
					{
						SendBuffer[0] = bank2;											//Copy the bank character into the send buffer
						XUartLite_Send(&Uart, SendBuffer, 1);							//Send the ASCII amplitude value over UART
					} else if (ReceiveBuffer[4] == ' ') {
						bank2 = ReceiveBuffer[5];
						xil_printf("%c", bank2);
					}
				} else if (ReceiveBuffer[0] == 'W') {									//WAVE header detected
					if (ReceiveBuffer [4] == '?') {										//WAVE query detected
						if (ReceiveBuffer[5] == '1')									//Channel 1 ID requested
						{
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch1A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch1A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch1A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch1B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch1B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch1B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch1C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch1C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch1C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch1D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch1D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch1D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '2') {							//Channel 2 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch2A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch2A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch2A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch2B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch2B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch2B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch2C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch2C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch2C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch2D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch2D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch2D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '3') {							//Channel 3 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch3A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch3A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch3A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch3B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch3B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch3B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch3C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch3C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch3C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch3D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch3D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch3D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '4') {							//Channel 4 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch4A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch4A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch4A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch4B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch4B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch4B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch4C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch4C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch4C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch4D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch4D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch4D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '5') {							//Channel 5 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch5A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch5A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch5A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch5B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch5B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch5B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch5C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch5C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch5C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch5D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch5D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch5D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '6') {							//Channel 6 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch6A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch6A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch6A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch6B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch6B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch6B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch6C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch6C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch6C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch6D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch6D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch6D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '7') {							//Channel 7 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch7A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch7A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch7A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch7B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch7B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch7B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch7C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch7C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch7C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch7D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch7D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch7D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[5] == '8') {							//Channel 8 ID requested
							if (ReceiveBuffer[6] == 'A')								//Bank A ID requested
							{
								itoa(ch8A,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch8A));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch8A));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'B') {						//Bank B ID requested
								itoa(ch8B,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch8B));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch8B));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'C') {						//Bank C ID requested
								itoa(ch8C,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch8C));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch8C));		//Send the ASCII waveform ID over UART
							} else if (ReceiveBuffer[6] == 'D') {						//Bank D ID requested
								itoa(ch8D,ID,10);										//Obtain a ASCII representation of the waveform ID
								memcpy(SendBuffer, ID, sizeof(ch8D));					//Copy the waveform ID ASCII value into the send buffer
								XUartLite_Send(&Uart, SendBuffer, sizeof(ch8D));		//Send the ASCII waveform ID over UART
							}
						} else if (ReceiveBuffer[4] == ' ') {
							strcpy(channel, "ch");
							strcpy(x, "0");
							x[0] = ReceiveBuffer[5];
							y = ReceiveBuffer[6];
							strcat(x,y);
							strcat(channel,x);
							xil_printf("%p", channel);
						}
					}
				}
       		   }
       		   break;
       	   default:
     		   error();
       		   dummy = 10;
       		   break;									// End program
       }
       }

// For Debug use only
/*       init_platform();

       print("Hello");

       cleanup_platform();
*/
       return 0;

}

